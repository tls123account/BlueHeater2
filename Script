-- Load Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create Rayfield Window
local Window = Rayfield:CreateWindow({
    Name = "Star Stream",
    LoadingTitle = "Loading Interface",
    LoadingSubtitle = "by tls123account",
    Theme = "Default",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "StarStreamData",
        FileName = "BlueHeater2Settings.json"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Access Required",
        Subtitle = "Enter the Key to Use the Script",
        Note = "To obtain the access key join DC: jSk8a52Jfk",
        FileName = "StarStreamKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"bigupdate"}
    },
    Discord = {
        Enabled = true,
        Invite = "jSk8a52Jfk",
        RememberJoins = true
    }
})

local replicatedStorage = game:GetService("ReplicatedStorage")
local players = game:GetService("Players")
local entityHitEvent = replicatedStorage:WaitForChild("PlayerEvents"):WaitForChild("EntityHit")

local player = players.LocalPlayer
local character, rootPart, stamina

local function updateCharacterReferences()
    character = player.Character or player.CharacterAdded:Wait()
    if character then
        rootPart = character:FindFirstChild("HumanoidRootPart")
        local valuesFolder = character:FindFirstChild("Values")
        stamina = valuesFolder and valuesFolder:FindFirstChild("Stamina") or nil
    end
end

updateCharacterReferences()

player.CharacterAdded:Connect(function()
    task.wait(0.5)
    updateCharacterReferences()
end)

-- Settings
local killAuraEnabled = false
local autoFarmEnabled = false
local autoFarmChestEnabled = false
local dodgeEnabled = false
local attackDistance = 15
local autoFarmDistance = 30
local chestFarmCooldown = 1
local dodgeThreshold = 10
local dodgeSpeed = 5
local attackCooldown = 0.1
local farmCooldown = 0.5
local bossPrioritizationEnabled = false
local autoClickPlayAgainEnabled = false
local autoClickLoopRunning = false
local autoTeleportEnabled = false
local espEnabled = false
local ignoredNPCs = {"Old Horse", "Armored Horse", "Broom Stalker", "Deer", "Cow", "Horse", "Giant Blue Chicken", "Giant Pink Chicken", "Giant Yellow Chicken", "Moose", "Chill Moose"}
local bossList = {"Skeleton King", "Dreadestwood", "Infernal Wolf", "Weeping Wyatt", "Malignant Malcolm", "Goblin King", "Nun", "Metal Slime"}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Main Features Tab
local mainTab = Window:CreateTab("Main Features", "sword")
local dungeonTab = Window:CreateTab("Dungeon & Tower", "skull")
local playerTab = Window:CreateTab("Player", "user")
local locationsTab = Window:CreateTab("Place Locations", "map")
local npcLocationsTab = Window:CreateTab("NPC Locations", "map") 
npcLocationsTab:CreateParagraph({
    Title = "NPC Locations Info",
    Content = "The NPCs here only show the ones that are on the same floor you are currently on."
})

local function createToggle(tab, name, flag, callback)
    return tab:CreateToggle({ Name = name, CurrentValue = false, Flag = flag, Callback = callback })
end

local function createSlider(tab, name, range, increment, suffix, flag, callback)
    return tab:CreateSlider({ Name = name, Range = range, Increment = increment, Suffix = suffix, CurrentValue = range[1], Flag = flag, Callback = callback })
end

-- Feature Toggles
createToggle(mainTab, "Enable Auto Farm", "AutoFarmToggle", function(value) autoFarmEnabled = value end)
createToggle(mainTab, "Enable Chest Farm", "ChestFarmToggle", function(value) autoFarmChestEnabled = value end)
createToggle(mainTab, "Enable Dodge Mechanism", "DodgeToggle", function(value) dodgeEnabled = value end)
createToggle(mainTab, "Boss Prioritization", "BossPriorityToggle", function(value) bossPrioritizationEnabled = value end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Kill Aura (Staff Version)
local staffAuraEnabled = false
local staffAuraRange = 15

local function findClosestStaffTarget(range)
    if not rootPart then return nil end

    local closestNPC, closestDistance = nil, math.huge
    local npcsFolder = workspace:FindFirstChild("SpawnedEntities")

    if not npcsFolder then return nil end

    for _, npc in ipairs(npcsFolder:GetChildren()) do
        local humanoid = npc:FindFirstChildOfClass("Humanoid")
        local rootPart = npc:FindFirstChild("HumanoidRootPartCollision") or npc:FindFirstChild("HumanoidRootPart")

        if humanoid and humanoid.Health > 0 and rootPart and not table.find(ignoredNPCs, npc.Name) then
            local playerDistance = (rootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if playerDistance <= range and playerDistance < closestDistance then
                closestNPC, closestDistance = npc, playerDistance
            end
        end
    end

    return closestNPC
end

createToggle(mainTab, "Enable Kill Aura", "KillAuraToggle", function(value) killAuraEnabled = value end)
createToggle(mainTab, "Kill Aura (With Staff)", "KillAuraStaffToggle", function(value)
    staffAuraEnabled = value
    if value then
        task.spawn(function()
            while staffAuraEnabled do
                task.wait(attackCooldown)
                
                local target = findClosestStaffTarget(staffAuraRange)
                if target then
                    local rootPart = target:FindFirstChild("HumanoidRootPartCollision") or target:FindFirstChild("HumanoidRootPart")
                    if rootPart then

                        local playerDistance = (rootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                        if playerDistance <= staffAuraRange then

                            local attackPosition = rootPart.Position - Vector3.new(0, 5, 0)
                            game:GetService("ReplicatedStorage").PlayerEvents.WeaponClassEvents.StaffAttack:FireServer(rootPart.CFrame, attackPosition)
                        end
                    end
                end
            end
        end)
    end
end)

mainTab:CreateParagraph({
    Title = "About Kill Aura With Staff",
    Content = "Even though it appears to work from a distance, you need to be close for it to deal damage."
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Feature Sliders
createSlider(mainTab, "Kill Aura Speed", {0.1, 1}, 0.1, "s", "KillAuraSpeedSlider", function(value) attackCooldown = value end)
createSlider(mainTab, "Kill Aura Range", {1, 1000}, 1, " studs", "KillAuraRangeSlider", function(value) attackDistance = value end)
createSlider(mainTab, "Kill Aura (With Staff) Range", {1, 1000}, 1, " studs", "StaffAuraRangeSlider", function(value) staffAuraRange = value end)
createSlider(mainTab, "Auto Farm Range", {1, 10000}, 5, " studs", "AutoFarmRangeSlider", function(value) autoFarmDistance = value end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Skill
local autoSkillEnabled = false
local vim = game:GetService("VirtualInputManager")

local function pressKey(key)
    vim:SendKeyEvent(true, key, false, game) 
    task.wait(0.1)
    vim:SendKeyEvent(false, key, false, game)
end

local function autoSkillLoop()
    while autoSkillEnabled do
        pressKey(Enum.KeyCode.One) 
        task.wait(5)

        pressKey(Enum.KeyCode.Two)
        task.wait(5)

        pressKey(Enum.KeyCode.Three) 
        task.wait(5)

        pressKey(Enum.KeyCode.Four)
        task.wait(5)

        pressKey(Enum.KeyCode.Five) 
        task.wait(5)

        pressKey(Enum.KeyCode.Six)
        task.wait(5)
    end
end

local AutoSkillToggle = dungeonTab:CreateToggle({
    Name = "Auto Skill",
    CurrentValue = false,
    Flag = "AutoSkill",
    Callback = function(Value)
        autoSkillEnabled = Value
        if autoSkillEnabled then
            task.spawn(autoSkillLoop) 
        end
    end
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Replay
local autoClickEnabled = false

local AutoClickToggle = dungeonTab:CreateToggle({
    Name = "Auto Play Again",
    CurrentValue = false,
    Flag = "AutoReplay",
    Callback = function(Value)
        autoClickEnabled = Value
    end
})

local player = game.Players.LocalPlayer
local screenGui = player:WaitForChild("PlayerGui"):WaitForChild("MainGui")
local instanceCompleteFrame = screenGui:WaitForChild("InstanceCompleteFrame")
local ReplayButton = instanceCompleteFrame.Container.Bottombar.PlayAgainBtnFrame

local function Click(Button)
    if not Button then
        return
    end

    if not Button.Visible or Button.ClipsDescendants then
        return
    end

    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.Position = UDim2.new(0.5, 0, 0.5, 0)
    Button.AnchorPoint = Vector2.new(0.5, 0.5)
    Button.ZIndex = 999
    Button.Parent = screenGui

    local vim = game:GetService("VirtualInputManager")

    local X = Button.AbsolutePosition.X + Button.AbsoluteSize.X * 0.95
    local Y = Button.AbsolutePosition.Y + (Button.AbsoluteSize.Y / 2)

    vim:SendMouseButtonEvent(X, Y, 0, true, game, 0)
    task.wait(0.1)
    vim:SendMouseButtonEvent(X, Y, 0, false, game, 0)
end

task.spawn(function()
    while true do
        task.wait(1)
        if autoClickEnabled and instanceCompleteFrame.Visible and ReplayButton.Visible then
            Click(ReplayButton)
        end
    end
end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Jump
local autoJumpEnabled = false

local AutoJumpToggle = dungeonTab:CreateToggle({
    Name = "Auto Jump (Prevents Being Stuck in Seats)",
    CurrentValue = false,
    Flag = "AutoJump",
    Callback = function(Value)
        autoJumpEnabled = Value
    end
})

local plr = game.Players.LocalPlayer
local vim = game:GetService("VirtualInputManager")

local function CheckSeated(humanoid)
    while humanoid do
        task.wait(0.1)
        if humanoid.SeatPart then
            vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
            task.wait(0.1)
            vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
        end
    end
end

local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    task.spawn(function()
        while humanoid.Parent do
            CheckSeated(humanoid)
            task.wait(0.1)
        end
    end)
end

if plr.Character then
    onCharacterAdded(plr.Character)
end

plr.CharacterAdded:Connect(onCharacterAdded)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Tower Gamemodes
local autoTowerGamemodes = false

dungeonTab:CreateToggle({
    Name = "Auto Tower Gamemodes",
    CurrentValue = false,
    Flag = "AutoTowerGamemodes",
    Callback = function(value)
        autoTowerGamemodes = value
        if autoTowerGamemodes then
            startAutoTowerGamemodes()
        end
    end
})

function getCurrentFloor()
    local player = game:GetService("Players").LocalPlayer
    local instanceInfoLabel = player.PlayerGui.MainGui.TopBar.ListFrame.InstanceInfoFrame.TextLabel

    if instanceInfoLabel then
        return instanceInfoLabel.Text
    end
    return nil
end

function getCurrentLavaRiseLevel()
    local towerFloors = workspace:FindFirstChild("TowerFloors")
    if not towerFloors then return nil end

    local lavaRiseFolder = towerFloors:FindFirstChild("Parkour Lava Rise")
    if not lavaRiseFolder then return nil end

    for _, level in ipairs(lavaRiseFolder:GetChildren()) do
        local objectsFolder = level:FindFirstChild("Objects")
        local lavaPart = objectsFolder and objectsFolder:FindFirstChild("Lava")
        local touchInterest = lavaPart and lavaPart:FindFirstChild("TouchInterest")
        
        if touchInterest then
            return level
        end
    end
    return nil
end

function getCurrentGolfLevel()
    local towerFloors = workspace:FindFirstChild("TowerFloors")
    if not towerFloors then return nil end

    local golfFolder = towerFloors:FindFirstChild("Golf")
    if not golfFolder then return nil end

    for _, level in ipairs(golfFolder:GetChildren()) do
        local objectsFolder = level:FindFirstChild("Objects")
        local clearPart = objectsFolder and objectsFolder:FindFirstChild("Clear Part")
        local touchInterest = clearPart and clearPart:FindFirstChild("TouchInterest")
        
        if touchInterest then
            return level
        end
    end
    return nil
end

function completePanelGlassObby()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")

    if rootPart then
        local toucherPath = workspace.TowerFloors:FindFirstChild("Panel Glass Obby")
            and workspace.TowerFloors["Panel Glass Obby"]:FindFirstChild("1")
            and workspace.TowerFloors["Panel Glass Obby"]["1"].Objects:FindFirstChild("PlayerCompletedToucher")

        if toucherPath then
            rootPart.CFrame = toucherPath.CFrame

            local touchInterest = toucherPath:FindFirstChild("TouchInterest")
            if touchInterest then
                firetouchinterest(rootPart, toucherPath, 0)
                task.wait(0.1)
                firetouchinterest(rootPart, toucherPath, 1)
            end
        end
    end
end

function completeGolf()
    local golfLevel = getCurrentGolfLevel()
    if not golfLevel then return end

    local objectsFolder = golfLevel:FindFirstChild("Objects")
    if objectsFolder then
        local golfBall = objectsFolder:FindFirstChild("Golf Ball")
        local clearPart = objectsFolder:FindFirstChild("Clear Part")

        if golfBall and clearPart then
            golfBall.CFrame = clearPart.CFrame

            local touchInterest = clearPart:FindFirstChild("TouchInterest")
            if touchInterest then
                firetouchinterest(golfBall, clearPart, 0)
                task.wait(0.1)
                firetouchinterest(golfBall, clearPart, 1)
            end
        end
    end
end

function completeLavaRise()
    local lavaLevel = getCurrentLavaRiseLevel()
    if not lavaLevel then return end

    local objectsFolder = lavaLevel:FindFirstChild("Objects")
    if objectsFolder then
        local toucher = objectsFolder:FindFirstChild("PlayerCompletedToucher")

        if toucher then
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:FindFirstChild("HumanoidRootPart")

            if rootPart then
                rootPart.CFrame = toucher.CFrame

                local touchInterest = toucher:FindFirstChild("TouchInterest")
                if touchInterest then
                    firetouchinterest(rootPart, toucher, 0)
                    task.wait(0.1)
                    firetouchinterest(rootPart, toucher, 1)
                end
            end
        end
    end
end

function startAutoTowerGamemodes()
    while autoTowerGamemodes do
        task.wait(1)

        local currentFloor = getCurrentFloor()
        if not currentFloor then return end

        if string.find(currentFloor, "Panel Glass Obby") then
            completePanelGlassObby()
        elseif string.find(currentFloor, "Golf") then
            completeGolf()
        elseif string.find(currentFloor, "Parkour Lava Rise") then
            completeLavaRise()
        end
    end
end
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Player Modifications
createSlider(playerTab, "Player Speed", {16, 1000}, 1, " speed", "PlayerSpeedSlider", function(value)
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then humanoid.WalkSpeed = value end
end)

createSlider(playerTab, "Jump Power", {50, 1000}, 10, " power", "JumpPowerSlider", function(value)
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then humanoid.JumpPower = value end
end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Player ESP
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local function createESP(player)
    if not player.Character then return end
    local head = player.Character:FindFirstChild("Head")
    if not head then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(4, 0, 1, 0)
    billboard.Adornee = head
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.Parent = head
    billboard.Name = "PlayerESP"

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextStrokeTransparency = 0
    nameLabel.TextScaled = true
    nameLabel.TextColor3 = Color3.new(1, 0, 0)
    nameLabel.Text = player.Name
    nameLabel.Parent = billboard

    local highlight = Instance.new("Highlight")
    highlight.Parent = player.Character
    highlight.Name = "ESPBox"
    highlight.FillTransparency = 1
    highlight.OutlineColor = Color3.new(1, 0, 0)


    spawn(function()
        while espEnabled and player and player.Character do
            task.wait(0.1)
        end
        if player.Character then
            local oldESP = player.Character:FindFirstChild("ESPBox")
            if oldESP then oldESP:Destroy() end
            local oldBillboard = head:FindFirstChild("PlayerESP")
            if oldBillboard then oldBillboard:Destroy() end
        end
    end)
end

local function updateESP()
    while espEnabled do
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer and player.Character then
                if not player.Character:FindFirstChild("ESPBox") then
                    createESP(player)
                end
            end
        end
        task.wait(1)
    end
end

createToggle(playerTab, "Player ESP", "PlayerESPToggle", function(value)
    espEnabled = value
    if value then
        task.spawn(updateESP)
    else

        for _, player in ipairs(Players:GetPlayers()) do
            if player.Character then
                local oldESP = player.Character:FindFirstChild("ESPBox")
                if oldESP then oldESP:Destroy() end
                local head = player.Character:FindFirstChild("Head")
                if head then
                    local oldBillboard = head:FindFirstChild("PlayerESP")
                    if oldBillboard then oldBillboard:Destroy() end
                end
            end
        end
    end
end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Hide Identity
local player = game.Players.LocalPlayer
local hideIdentityEnabled = false
local originalData = {}

local function updateTextLabels(applyFake)
    local playerGui = player:FindFirstChild("PlayerGui")
    local mainGui = playerGui and playerGui:FindFirstChild("MainGui")
    local mainFrame = mainGui and mainGui:FindFirstChild("MainFrame")
    local inventoryFrame = mainFrame and mainFrame:FindFirstChild("InventoryFrame")
    local interfaceFrame = mainGui and mainGui:FindFirstChild("InterfaceFrame")

    if not (mainGui and mainFrame and inventoryFrame) then return end

    local playerFolderName = player.Name .. " " .. player.DisplayName
    local playerFolder = mainFrame.PlayersFrame and mainFrame.PlayersFrame.PlayersScrollerFrame and mainFrame.PlayersFrame.PlayersScrollerFrame.PlayersScroller:FindFirstChild(playerFolderName)

    if playerFolder then
        local displayNameLabel = playerFolder:FindFirstChild("DisplayNameLabel")
        local usernameLabel = playerFolder:FindFirstChild("UsernameLabel")
        local imageLabel = playerFolder:FindFirstChild("ImageLabel")
        local profileBtnFrame = playerFolder:FindFirstChild("Bottombar") and playerFolder.Bottombar:FindFirstChild("ProfileBtnFrame")

        if applyFake then
            if displayNameLabel then originalData.displayName = originalData.displayName or displayNameLabel.Text displayNameLabel.Text = "StarStream" end
            if usernameLabel then originalData.username = originalData.username or usernameLabel.Text usernameLabel.Text = "StarStream" end
            if imageLabel then originalData.image = originalData.image or imageLabel.Image imageLabel.Image = "rbxassetid://129398163" end
            if profileBtnFrame then profileBtnFrame.Visible = false end
        else
            if displayNameLabel then displayNameLabel.Text = originalData.displayName or displayNameLabel.Text end
            if usernameLabel then usernameLabel.Text = originalData.username or usernameLabel.Text end
            if imageLabel then imageLabel.Image = originalData.image or imageLabel.Image end
            if profileBtnFrame then profileBtnFrame.Visible = true end
        end
    end

    if interfaceFrame then
        local interfaceLevelLabel = interfaceFrame.Experience and interfaceFrame.Experience:FindFirstChild("Level")
        local levelLabel = inventoryFrame and inventoryFrame.PlayerFrame and inventoryFrame.PlayerFrame.Topbar:FindFirstChild("LevelLabel")
        local charNameLabel = inventoryFrame.PlayerFrame.Topbar:FindFirstChild("CharacterNameLabel")

        if applyFake then
            if interfaceLevelLabel then originalData.level = originalData.level or interfaceLevelLabel.Text interfaceLevelLabel.Text = "LEVEL 999" end
            if levelLabel then originalData.inventoryLevel = originalData.inventoryLevel or levelLabel.Text levelLabel.Text = "<stroke color=\"#000000\" thickness=\"2\" transparency=\"0.75\">Lv. <font color=\"#ffd500\">999</font></stroke>" end
            if charNameLabel then originalData.charName = originalData.charName or charNameLabel.Text charNameLabel.Text = "StarStream" end
        else
            if interfaceLevelLabel then interfaceLevelLabel.Text = originalData.level or interfaceLevelLabel.Text end
            if levelLabel then levelLabel.Text = originalData.inventoryLevel or levelLabel.Text end
            if charNameLabel then charNameLabel.Text = originalData.charName or charNameLabel.Text end
        end
    end

    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local healthOverhead = humanoidRootPart:FindFirstChild("HealthOverhead")
            if healthOverhead then
                local container = healthOverhead:FindFirstChild("Container")
                local displayName = container and container:FindFirstChild("DisplayName")

                if applyFake then
                    if displayName then originalData.healthDisplayName = originalData.healthDisplayName or displayName.Text displayName.Text = "StarStream" end
                else
                    if displayName then displayName.Text = originalData.healthDisplayName or displayName.Text end
                end
            end
        end
    end
end

player.CharacterAdded:Connect(function()
    task.wait(0.25)
    updateTextLabels(hideIdentityEnabled)
end)

local hideIdentityToggle = playerTab:CreateToggle({
    Name = "Hide Identity (Client-Sided)",
    CurrentValue = false,
    Flag = "HideIdentityToggle",
    Callback = function(value)
        hideIdentityEnabled = value
        updateTextLabels(hideIdentityEnabled)
    end
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Collect Orbs
local autoCollectOrbsEnabled = false
local collectCooldown = 0.5

local function collectOrbs()
    while autoCollectOrbsEnabled do
        task.wait(collectCooldown)

        if not rootPart then

            continue
        end

        local itemOrbsFolder = workspace:FindFirstChild("ItemOrbs")
        if not itemOrbsFolder then

            continue
        end

        local closestOrb, closestDistance = nil, math.huge

        for _, item in ipairs(itemOrbsFolder:GetChildren()) do
            if item:IsA("BasePart") then
                local prompt = item:FindFirstChild("ProximityPrompt")

                if prompt then
                    local orbPosition = item.Position
                    local distance = (rootPart.Position - orbPosition).Magnitude

                    if distance < closestDistance then
                        closestOrb, closestDistance = item, distance
                    end
                end
            end
        end

        if closestOrb then
            local prompt = closestOrb:FindFirstChild("ProximityPrompt")

            if prompt then
                print("Işınlanıyor:", closestOrb.Position)
                rootPart.CFrame = CFrame.new(closestOrb.Position + Vector3.new(0, 2, 0))
                task.wait(0.2)

                fireproximityprompt(prompt) 
            end
        else

        end
    end
end

playerTab:CreateToggle({
    Name = "Auto Collect Orbs",
    CurrentValue = false,
    Flag = "AutoCollectOrbs",
    Callback = function(value)
        autoCollectOrbsEnabled = value
        if autoCollectOrbsEnabled then
            task.spawn(collectOrbs)
        end
    end
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Collect Materials
local autoCollectEnabled = false
local materialsFolder = workspace:FindFirstChild("Materials")

local function collectMaterials()
    while autoCollectEnabled do
        if not autoCollectEnabled then return end

        if materialsFolder and rootPart then
            for _, materialCategory in ipairs(materialsFolder:GetChildren()) do
                if not autoCollectEnabled then return end

                if materialCategory:IsA("Folder") or materialCategory:IsA("Model") then
                    for _, material in ipairs(materialCategory:GetChildren()) do
                        if not autoCollectEnabled then return end 

                        if material:IsA("Model") then
                            local prompt = material:FindFirstChildWhichIsA("ProximityPrompt", true)
                            if prompt then
                                local materialPosition = material:GetBoundingBox().Position
                                rootPart.CFrame = CFrame.new(materialPosition)
                                task.wait(0.2)  
                                fireproximityprompt(prompt)
                                task.wait(0.5)
                            end
                        end
                    end
                end
            end
        end

        task.wait(2)
    end
end

createToggle(playerTab, "Auto Collect Materials", "AutoCollectMaterials", function(value)
    autoCollectEnabled = value
    if autoCollectEnabled then
        task.spawn(collectMaterials)
    end
end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Unlock Campfires
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local respawnPointsFolder = workspace:FindFirstChild("RespawnPoints")

local function teleportAndActivatePrompt(tpLocation)
    if player.Character and tpLocation then
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.CFrame = tpLocation.CFrame
            task.wait(0.8)
            local proximityPrompt = tpLocation:FindFirstChild("ProximityPrompt", true)
            if proximityPrompt then
                fireproximityprompt(proximityPrompt)
            end
        end
    end
end

local function teleportToAllRespawnPoints()
    if respawnPointsFolder then
        for _, location in ipairs(respawnPointsFolder:GetChildren()) do
            if not autoTeleportEnabled then
   
                return
            end

            if location:IsA("Model") then
                local targetPart = location:FindFirstChild("Cube.005")
                if targetPart then
                    teleportAndActivatePrompt(targetPart)
                    task.wait(1.5)
                end
            end
        end
    end
end

createToggle(playerTab, "Unlock All Campfires", "AutoTPToggle", function(value)
    autoTeleportEnabled = value
    if value then
        task.spawn(teleportToAllRespawnPoints)
    end
end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Infinite Stats
local infiniteStatsEnabled = false
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function setInfiniteStats()
    while infiniteStatsEnabled do
        task.wait(0.1)

        character = player.Character or player.CharacterAdded:Wait()
        local valuesFolder = character:FindFirstChild("Values")

        if valuesFolder then
            local stamina = valuesFolder:FindFirstChild("Stamina")
            local armorRating = valuesFolder:FindFirstChild("ArmorRating")
            local guardPower = valuesFolder:FindFirstChild("GuardPower")

            if stamina then stamina.Value = math.huge end
            if armorRating then armorRating.Value = math.huge end
            if guardPower then guardPower.Value = math.huge end
        else

        end
    end
end

playerTab:CreateToggle({
    Name = "Enable Infinite Stamina + Armor Rating + Guard Power",
    CurrentValue = false,
    Flag = "InfiniteStatsToggle",
    Callback = function(value)
        infiniteStatsEnabled = value

        if infiniteStatsEnabled then
            task.spawn(setInfiniteStats)
        end
    end
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Float
local floatEnabled = false
local floatBodyPosition = nil

local function enableFloat()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end

    if floatBodyPosition then
        floatBodyPosition:Destroy()
    end

    floatBodyPosition = Instance.new("BodyPosition")
    floatBodyPosition.Position = humanoidRootPart.Position 
    floatBodyPosition.MaxForce = Vector3.new(0, math.huge, 0) 
    floatBodyPosition.D = 10
    floatBodyPosition.P = 5000 
    floatBodyPosition.Parent = humanoidRootPart
end

local function disableFloat()
    if floatBodyPosition then
        floatBodyPosition:Destroy()
        floatBodyPosition = nil
    end
end

playerTab:CreateToggle({
    Name = "Enable Float",
    CurrentValue = false,
    Flag = "EnableFloatToggle",
    Callback = function(value)
        floatEnabled = value
        if floatEnabled then
            enableFloat()
        else
            disableFloat()
        end
    end
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Noclip
local noclipEnabled = false

local function noclipLoop()
    while noclipEnabled do
        task.wait(0.1)
        if not game.Players.LocalPlayer.Character then continue end
        for _, part in ipairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end

playerTab:CreateToggle({
    Name = "Enable Noclip",
    CurrentValue = false,
    Flag = "EnableNoclipToggle",
    Callback = function(value)
        noclipEnabled = value
        if noclipEnabled then

            task.spawn(noclipLoop)
        else

        end
    end
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Anti-AFK Mechanism
local antiAfkEnabled = false
createToggle(playerTab, "Enable Anti-AFK", "AntiAFKToggle", function(value)
    antiAfkEnabled = value
    if antiAfkEnabled then
        spawn(function()
            while antiAfkEnabled do
                game:GetService("VirtualUser"):CaptureController()
                game:GetService("VirtualUser"):ClickButton2(Vector2.new())
                wait(60)
            end
        end)
    end
end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Player Safety
local safetyShutdownEnabled = false
local whitelist = {}

local function checkPlayersOnJoin()
    local localPlayer = game.Players.LocalPlayer
    if not localPlayer then return end 

    task.wait(2)

    local players = game.Players:GetPlayers()
    local playerCount = #players

    local allowedPlayers = {}
    for _, player in ipairs(players) do
        if player == localPlayer or table.find(whitelist, player.Name) then
            table.insert(allowedPlayers, player.Name)
        end
    end

    if #allowedPlayers < playerCount then
        localPlayer:Kick("You have been kicked for safety reasons. Another non-whitelisted player is in the server.")
    end
end

local function addToWhitelist(name)
    if not table.find(whitelist, name) then
        table.insert(whitelist, name)
    end
end

local function removeFromWhitelist(name)
    for i, v in ipairs(whitelist) do
        if v == name then
            table.remove(whitelist, i)
            break
        end
    end
end

createToggle(playerTab, "Enable Player Safety Kick", "SafetyShutdown", function(value)
    safetyShutdownEnabled = value

    if safetyShutdownEnabled then
        task.spawn(checkPlayersOnJoin)
    end
end)

playerTab:CreateInput({
    Name = "Add Player to Whitelist",
    PlaceholderText = "Enter Player Name",
    RemoveTextAfterFocusLost = true,
    Callback = function(value)
        addToWhitelist(value)
    end
})

playerTab:CreateInput({
    Name = "Remove Player from Whitelist",
    PlaceholderText = "Enter Player Name",
    RemoveTextAfterFocusLost = true,
    Callback = function(value)
        removeFromWhitelist(value)
    end
})

playerTab:CreateParagraph({
    Title = "What is Player Safety Kick?",
    Content = "When you join a server, if another non-whitelisted player is present, you will be instantly kicked for safety."
})

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    if safetyShutdownEnabled then
        checkPlayersOnJoin()
    end
end)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Location Teleports
local locations = {
    {name = "F1 1. Daily Quest", pos = Vector3.new(-261.952179, 19.2908115, 1093.51624)},
    {name = "F1 2. Daily Quest", pos = Vector3.new(-744.341736, 12.9146423, 837.407776)},
    {name = "F1 3. Daily Quest", pos = Vector3.new(-2466.90698, -139.352249, 2697.19336)},
    {name = "F1 Tower", pos = Vector3.new(947.001526, -249.33345, -1308.22571)},
    {name = "F1 Mines Dungeon", pos = Vector3.new(-2734.40112, -4.48893833, 1540.36414)},
    {name = "F1 Cellar Dungeon", pos = Vector3.new(-634.33313, 10.507247, 731.670105)},
    {name = "F1 Temple Ruins Dungeon", pos = Vector3.new(248.904572, -341.99408, -1016.72992)}, 
    {name = "F1 Enchanted Forest Dungeon", pos = Vector3.new(-1823.48682, -223.106812, 3113.61206)},
    {name = "F1 Skeleton King Dungeon", pos = Vector3.new(-2665.80908, -34.6017609, -49.0371437)},
    {name = "F1 Dreadestwood", pos = Vector3.new(-4280.44336, -321.735138, -137.69548)},
    {name = "F1 Infernal Wolf", pos = Vector3.new(-3920.88159, 404.709381, 4644.0376)},
    {name = "F1 Weeping Wyatt", pos = Vector3.new(-2253.10791, -66.3540497, 5695.48975)},
    {name = "F1 Malignant Malcolm", pos = Vector3.new(-1605.77393, -256.614471, 3982.68213)},
    {name = "F1 Goblin King", pos = Vector3.new(-899.851807, -114.549988, 2195.17554)},
    {name = "F1 Nun", pos = Vector3.new(-2975.53052, -24.1605091, 856.163391)},
    {name = "F1 Metal Slime", pos = Vector3.new(-2080, -659.970459, -278.000031)},
	{name = "F2 1. Daily Quest", pos = Vector3.new(1643.80249, 1249.99829, -531.957581)},
    {name = "F2 2. Daily Quest", pos = Vector3.new(212.593155, 918.516052, -654.477905)},
    {name = "F2 3. Daily Quest", pos = Vector3.new(179.287811, 1084.80408, 979.143494)}  ,
    {name = "F2 Arcane Archive Dungeon", pos = Vector3.new(-1980.60522, 916.683533, 743.937683)},
    {name = "F2 Ominous Cave Dungeon", pos = Vector3.new(3589.96387, -296.962128, 2153.79199)},
    {name = "F2 Haunted Mansion Dungeon", pos = Vector3.new(213.737793, 928.864136, 556.664185)},
    {name = "F2 Purple Gate (its going to be a dungeon one day)", pos = Vector3.new(2725.55762, 456.505249, 2282.18457)},
    {name = "F2 Mothlem Queen", pos = Vector3.new(1494.27222, 984.454041, 1272.40234)}, 
    {name = "F2 Tsuu", pos = Vector3.new(-2323.37744, 1186.60706, 1346.45923)},
	{name = "F2 Frankenstein", pos = Vector3.new(2650.4021, 1322.1405, 668.86615)}  
}

for _, location in ipairs(locations) do
    locationsTab:CreateButton({
        Name = location.name,
        Callback = function()
            if rootPart then
                rootPart.CFrame = CFrame.new(location.pos)
            end
        end
    })
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- NPC Locations
local npcsFolder = workspace:FindFirstChild("NPCs")

if npcsFolder then
    for _, npc in ipairs(npcsFolder:GetChildren()) do
        if npc:IsA("Model") then
            npcLocationsTab:CreateButton({
                Name = npc.Name,
                Callback = function()
                    if rootPart then

                        local modelCFrame = npc:GetBoundingBox()
                        rootPart.CFrame = modelCFrame
                    end
                end
            })
        end
    end
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Settings Tab
local settingsTab = Window:CreateTab("Settings", "settings")

local fullBrightnessEnabled = false
local defaultLighting = game:GetService("Lighting").Brightness 

local function setBrightness(value)
    local lighting = game:GetService("Lighting")
    if value then
        lighting.Brightness = 5 
        lighting.GlobalShadows = false 
        lighting.ClockTime = 14 
    else
        lighting.Brightness = defaultLighting
        lighting.GlobalShadows = true 
        lighting.ClockTime = 12 
    end
end

settingsTab:CreateToggle({
    Name = "Full Brightness",
    CurrentValue = false,
    Flag = "FullBrightnessToggle",
    Callback = function(value)
        fullBrightnessEnabled = value
        setBrightness(fullBrightnessEnabled)
    end
})

local lowGraphicsEnabled = false
local function setLowGraphics(value)
    local lighting = game:GetService("Lighting")
    if value then
        lighting.Brightness = 1
        lighting.GlobalShadows = false
        lighting.FogEnd = 500
    else
        lighting.Brightness = 2
        lighting.GlobalShadows = true
        lighting.FogEnd = 1000
    end
end

settingsTab:CreateToggle({
    Name = "Low Graphics Mode",
    CurrentValue = false,
    Flag = "LowGraphicsToggle",
    Callback = function(value)
        lowGraphicsEnabled = value
        setLowGraphics(lowGraphicsEnabled)
    end
})
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Find Closest NPC
local function findClosestNPC(range)
    if not rootPart then return nil end

    local closestNPC, closestDistance = nil, math.huge
    local npcsFolder = workspace:FindFirstChild("SpawnedEntities")

    if not npcsFolder then return nil end

    for _, npc in ipairs(npcsFolder:GetChildren()) do
        local humanoid = npc:FindFirstChild("Humanoid")
        local humanoidRootPart = npc:FindFirstChild("HumanoidRootPart")

        if npc:IsA("Model") and humanoidRootPart and humanoid and humanoid.Health > 0 then
            if not table.find(ignoredNPCs, npc.Name) then
                local distance = (rootPart.Position - humanoidRootPart.Position).Magnitude
                if distance < range and distance < closestDistance then
                    closestNPC, closestDistance = npc, distance
                end
            end
        end
    end

    return closestNPC
end

-- Find Closest Boss
local function findClosestBoss(range)
    if not rootPart then return nil end

    local closestBoss, closestDistance = nil, math.huge
    local npcsFolder = workspace:FindFirstChild("SpawnedEntities")

    if not npcsFolder then return nil end

    for _, npc in ipairs(npcsFolder:GetChildren()) do
        local humanoid = npc:FindFirstChild("Humanoid")
        local humanoidRootPart = npc:FindFirstChild("HumanoidRootPart")

        if npc:IsA("Model") and humanoidRootPart and humanoid and humanoid.Health > 0 then
            if table.find(bossList, npc.Name) then
                local distance = (rootPart.Position - humanoidRootPart.Position).Magnitude
                if distance < range and distance < closestDistance then
                    closestBoss, closestDistance = npc, distance
                end
            end
        end
    end

    return closestBoss
end

-- Find Closest Chest
local function findClosestChest()
    if not rootPart then return nil end

    local closestChest, closestDistance = nil, math.huge
    local chestsFolder = workspace:FindFirstChild("FX")

    if not chestsFolder then return nil end

    for _, chest in ipairs(chestsFolder:GetChildren()) do
        local circle = chest:FindFirstChild("Circle.001")
        if chest:IsA("Model") and circle and circle:FindFirstChild("ProximityPrompt") then
            local distance = (rootPart.Position - circle.Position).Magnitude
            if distance < closestDistance then
                closestChest, closestDistance = chest, distance
            end
        end
    end

    return closestChest
end

-- Auto Farm Chest
local function autoFarmChest()
    while task.wait(chestFarmCooldown) do
        if autoFarmChestEnabled and rootPart then
            local closestChest = findClosestChest()
            if closestChest then
                local chestPosition = closestChest["Circle.001"].Position
                local lookDirection = (chestPosition - rootPart.Position).Unit
                rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookDirection)

                workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, chestPosition)

                rootPart.CFrame = closestChest["Circle.001"].CFrame * CFrame.new(0, 0, -1)

                task.wait(0.2)

                local proximityPrompt = closestChest["Circle.001"]:FindFirstChild("ProximityPrompt")
                if proximityPrompt then
                    fireproximityprompt(proximityPrompt)
                end
            end
        end
    end
end

-- Kill Aura
local lastAttackTime = 0 

local function killAura()
    while true do
        if killAuraEnabled and rootPart then
            if tick() - lastAttackTime >= attackCooldown then
                local target = bossPrioritizationEnabled and findClosestBoss(attackDistance) or findClosestNPC(attackDistance)
                if target then
                    entityHitEvent:FireServer(target)
                    lastAttackTime = tick()
                end
            end
        end
        task.wait(0.01)
    end
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Auto Tower
local towerDodgeEnabled = false
local lastTowerDodgeTime = 0
local originalPosition = nil
local panicThreshold = 30
local safeZonePart = nil
local isInSafeZone = false
local dodgeInProgress = false
local autoFarmCooldown = 0

local function createSafeZone()
    if safeZonePart and safeZonePart.Parent then return end

    safeZonePart = Instance.new("Part")
    safeZonePart.Size = Vector3.new(20, 1, 20)
    safeZonePart.Position = Vector3.new(0, 500, 0)
    safeZonePart.Anchored = true
    safeZonePart.Transparency = 1
    safeZonePart.CanCollide = true
    safeZonePart.Parent = workspace
end

local function onHealthChanged(health)
    if not rootPart or not character then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local healthPercentage = (health / humanoid.MaxHealth) * 100
    if healthPercentage <= panicThreshold then
        if not originalPosition then
            originalPosition = rootPart.Position
        end
        createSafeZone()
        rootPart.CFrame = CFrame.new(safeZonePart.Position + Vector3.new(0, 3, 0))
        isInSafeZone = true
    elseif healthPercentage >= 100 and originalPosition then
        rootPart.CFrame = CFrame.new(originalPosition)
        originalPosition = nil
        isInSafeZone = false
    end
end

local function enablePanicMode()
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.HealthChanged:Connect(onHealthChanged)
    end
end

local towerFarmEnabled = false
local towerFarmCooldown = 0.5

local function towerAutoFarm()
    while task.wait(0.1) do
        if towerFarmEnabled and rootPart and tick() > autoFarmCooldown and not isInSafeZone and not dodgeInProgress then
            local target = findClosestNPC(autoFarmDistance)
            if target and target:FindFirstChild("HumanoidRootPart") then
                local targetPosition = target.HumanoidRootPart.Position
                local safePosition = Vector3.new(targetPosition.X, targetPosition.Y + 20, targetPosition.Z)
                
                rootPart.CFrame = CFrame.new(safePosition)

                local bodyVel = rootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity")
                bodyVel.Velocity = Vector3.new(0, 0, 0)
                bodyVel.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                bodyVel.Parent = rootPart
            end
        else
            if rootPart then
                local bodyVel = rootPart:FindFirstChild("BodyVelocity")
                if bodyVel then bodyVel:Destroy() end
            end
        end
    end
end

local function towerDodgeHitbox()
    while task.wait(0.01) do
        if not (towerDodgeEnabled and rootPart) then continue end
        local hitboxes = workspace:FindFirstChild("FX")
        if not hitboxes then continue end

        local closestHitbox, closestDistance = nil, math.huge
        local safestDirection = nil
        local bestSafePosition = nil

        for _, hitbox in ipairs(hitboxes:GetChildren()) do
            if hitbox:IsA("BasePart") and hitbox.Name == "Inner" and hitbox.Transparency < 1 then
                local distance = (rootPart.Position - hitbox.Position).Magnitude
                if distance < dodgeThreshold and distance < closestDistance then
                    closestHitbox, closestDistance = hitbox, distance
                end
            end
        end

        if closestHitbox then
            if tick() - lastTowerDodgeTime > 0.1 then
                lastTowerDodgeTime = tick()
                dodgeInProgress = true

                if not rootPart then continue end

                local possibleDirections = {
                    Vector3.new(1, 0, 0),
                    Vector3.new(-1, 0, 0),
                    Vector3.new(0, 0, 1),
                    Vector3.new(0, 0, -1), 
                    Vector3.new(1, 0, 1), 
                    Vector3.new(-1, 0, 1), 
                    Vector3.new(1, 0, -1), 
                    Vector3.new(-1, 0, -1) 
                }

                local bestDistance = 0
                for _, direction in ipairs(possibleDirections) do
                    local testPosition = rootPart.Position + (direction * (dodgeSpeed + 15))
                    local testDistance = (testPosition - closestHitbox.Position).Magnitude
                    
                    if testPosition.Y >= 0 and testDistance > bestDistance then
                        bestDistance = testDistance
                        safestDirection = direction
                        bestSafePosition = testPosition
                    end
                end

                if safestDirection and bestSafePosition then
                    local finalSafePosition = bestSafePosition + Vector3.new(0, 5, 0)

                    if finalSafePosition.Y < 0 then
                        finalSafePosition = Vector3.new(finalSafePosition.X, 5, finalSafePosition.Z)
                    end

                    rootPart.CFrame = CFrame.new(finalSafePosition)

                    task.wait(0.3) -- Dodge sonrası gecikme

                    if rootPart.Position.Y < 0 then
                        rootPart.CFrame = CFrame.new(rootPart.Position.X, 10, rootPart.Position.Z)
                    end
                end

                task.wait(0.5)
                dodgeInProgress = false
            end
        end
    end
end

dungeonTab:CreateToggle({
    Name = "Auto Tower (Auto Farm + Auto Dodge + Auto Safe Spot)",
    CurrentValue = false,
    Flag = "TowerDodgeToggle",
    Callback = function(value)
        towerDodgeEnabled = value
        towerFarmEnabled = value

        if towerDodgeEnabled then
            createSafeZone()
            task.spawn(towerDodgeHitbox)
            task.spawn(enablePanicMode)
            task.spawn(towerAutoFarm)
        else
            if rootPart then
                local bodyVel = rootPart:FindFirstChild("BodyVelocity")
                if bodyVel then bodyVel:Destroy() end

                local bodyGyro = rootPart:FindFirstChild("BodyGyro")
                if bodyGyro then bodyGyro:Destroy() end
            end
        end
    end
})
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Anti Fall Damage
local antiFallDamageEnabled = false

dungeonTab:CreateToggle({
    Name = "Anti Fall Damage",
    CurrentValue = false,
    Flag = "AntiFallDamage",
    Callback = function(value)
        antiFallDamageEnabled = value
    end
})

local function preventFallDamage()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")

    game:GetService("RunService").Stepped:Connect(function()
        if antiFallDamageEnabled and rootPart and rootPart.Velocity.Y < -50 then
            rootPart.Velocity = Vector3.new(0, -10, 0)
        end
    end)
end

task.spawn(preventFallDamage)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Dodge
local lastDodgeTime = 0
local dodgeCooldown = 0.3
local dodgeRange = 20
local safeHeight = 5 
local dodgeInProgress = false

local function getSafeDodgePosition()
    if not rootPart then return end

    local possibleDirections = {
        Vector3.new(1, 0, 0),  
        Vector3.new(-1, 0, 0), 
        Vector3.new(0, 0, 1),  
        Vector3.new(0, 0, -1),
        Vector3.new(1, 0, 1), 
        Vector3.new(-1, 0, 1), 
        Vector3.new(1, 0, -1), 
        Vector3.new(-1, 0, -1)
    }

    local safestDirection = nil
    local maxDistance = 0

    for _, direction in ipairs(possibleDirections) do
        local testPosition = rootPart.Position + (direction * dodgeRange)
        local distance = (testPosition - rootPart.Position).Magnitude

        if distance > maxDistance then
            maxDistance = distance
            safestDirection = direction
        end
    end

    if safestDirection then
        return rootPart.Position + (safestDirection * dodgeRange) + Vector3.new(0, safeHeight, 0)
    else
        return rootPart.Position + Vector3.new(0, safeHeight, 0) 
    end
end

local function dodgeHitbox()
    while task.wait(0.01) do
        if not (dodgeEnabled and rootPart) then continue end
        local hitboxes = workspace:FindFirstChild("FX")
        if not hitboxes then continue end

        local closestHitbox, closestDistance = nil, math.huge

        for _, hitbox in ipairs(hitboxes:GetChildren()) do
            if hitbox:IsA("BasePart") and hitbox.Name == "Inner" and hitbox.Transparency < 1 then
                local distance = (rootPart.Position - hitbox.Position).Magnitude
                if distance < dodgeThreshold and distance < closestDistance then
                    closestHitbox, closestDistance = hitbox, distance
                end
            end
        end

        if not closestHitbox then continue end

        if tick() - lastDodgeTime > 0.15 then
            lastDodgeTime = tick()

            dodgeInProgress = true

            local safePosition = getSafeDodgePosition()
            if safePosition then
                rootPart.CFrame = CFrame.new(safePosition)

                autoFarmCooldown = tick() + dodgeCooldown
            end

            task.wait(dodgeCooldown)
            dodgeInProgress = false
        end
    end
end

task.spawn(dodgeHitbox)

-- Auto Farm
local autoFarmCooldown = 0

local function autoFarm()
    while task.wait(0.1) do
        if autoFarmEnabled and rootPart and tick() > autoFarmCooldown and not dodgeInProgress then
            local target = findClosestNPC(autoFarmDistance)
            if target and target:FindFirstChild("HumanoidRootPart") then
                local targetPosition = target.HumanoidRootPart.Position
                local safePosition = Vector3.new(targetPosition.X, targetPosition.Y + 20, targetPosition.Z)
                
                rootPart.CFrame = CFrame.new(safePosition)

                local bodyVel = rootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity")
                bodyVel.Velocity = Vector3.new(0, 0, 0)
                bodyVel.MaxForce = Vector3.new(0, math.huge, 0)
                bodyVel.Parent = rootPart
            end
        else
            if rootPart then
                local bodyVel = rootPart:FindFirstChild("BodyVelocity")
                if bodyVel then
                    bodyVel:Destroy()
                end
            end
        end
    end
end

task.spawn(autoFarm)

-- Task Spawns
task.spawn(killAura)
task.spawn(autoFarmChest)

-- Rayfield Configuration
Rayfield:LoadConfiguration()
